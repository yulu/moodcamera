float divation(float a, float b){
	float f = floor(a/b);
	float c = ceil(a/b);
	return min((a - b*f), (c*b - a));
}

float locate(vec2 pos, float dx, float dy, float radius, float interval){
	float x = pos.x/dx;
	float y = pos.y/dy;
	
	float mod_x = divation(x, interval);
	float mod_y = divation(y, interval);
	
	float mod_r = sqrt(mod_x*mod_x + mod_y*mod_y);
	
	if(mod_r < radius)
		return 0.0;
	else 
		return mod_r;
}

vec3 filter(vec3 color, vec3 frgb, sampler2D texture, vec2 texturePos) {
	float MagTol = .4;
	const vec3 W = vec3(0.2125, 0.7154, 0.0721);
	float gray = dot(color, W);
	
	//pixel size
	float dx = uPixelSize.x;
	float dy = uPixelSize.y;
	vec2 stp0 = vec2(dx, 0.);
	vec2 st0p = vec2(0., dy);
	vec2 stpp = vec2(dx, dy);
	vec2 stpm = vec2(dx, -1.*dy);
	
	float i00 = 	dot(texture2D(texture, texturePos).rgb, W);
	float im1m1 =	dot(texture2D(texture, texturePos-stpp).rgb, W);
	float ip1p1 = 	dot(texture2D(texture, texturePos+stpp).rgb, W);
	float im1p1 = 	dot(texture2D(texture, texturePos-stpm).rgb, W);
	float ip1m1 = 	dot(texture2D(texture, texturePos+stpm).rgb, W);
	float im10 = 	dot(texture2D(texture, texturePos-stp0).rgb, W);
	float ip10 = 	dot(texture2D(texture, texturePos+stp0).rgb, W);
	float i0m1 = 	dot(texture2D(texture, texturePos-st0p).rgb, W);
	float i0p1 = 	dot(texture2D(texture, texturePos+st0p).rgb, W);
	
	//H and V sobel filters
	float h = -1.*im1p1 - 2.*i0p1 - 1.*ip1p1 + 1.*im1m1 + 2.*i0m1 + 1.*ip1m1;
	float v = -1.*im1m1 - 2.*im10 - 1.*im1p1 + 1.*ip1m1 + 2.*ip10 + 1.*ip1p1;
	float mag = length(vec2(h, v));
	
	if(mag > MagTol){
		color = vec3(256.0, 8.0, 8.0)/256.;
	}else{
	
		if(gray < 0.3){
			color = vec3(251.0, 84.0, 84.0)/256.;
		}
		else if(gray >=0.3 && gray < 0.4){
			if(locate(texturePos, dx, dy, 3., 15.) == 0.0)
				color = vec3(246.0, 216.0, 171.0)/256.;
			else
				color = vec3(251.0, 84.0, 84.0)/256.;
		}
		else{
			color = vec3(246.0, 216.0, 171.0)/256.;
		}
		
	}
	
	const float sqrt2 = 1.414213562373;
	float len = distance(vTextureCoord, vec2(0.5)) * sqrt2;
	len = smoothstep(0.1, 1.0, len);
	color *= mix(0.8, 1.0, 1.0 - len);
	
	return color;
	
}