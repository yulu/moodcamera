vec3 filter(vec3 color, vec3 frgb, sampler2D texture, vec2 texturePos) {
	float Res = 1.0/uPixelSize.x;
	float D = 20.;
	float R = 0.35;
	
	vec2 st = texturePos.st;
	float Radius = Res * R;
	vec2 xy = Res * st;
	
	vec2 dxy = xy - Res/2.;
	float r = length(dxy);
	float beta = atan(dxy.y, dxy.x) + radians(D)*(Radius - r)/Radius;
	
	vec2 xy1 = xy;
	if(r <= Radius)
	{
		xy1.s = Res/2. + r*vec2(cos(beta)).s;
		xy1.t = Res/2. + r*vec2(sin(beta)).t;
	}
	st = xy1/Res;
	
	color = texture2D(texture, st).rgb;
	
	color = brightness(color, 0.4724);
	color = contrast(color, 0.3149);
	
	color.g = color.g * 0.87 + 0.13;
	color.b = color.b * 0.439 + 0.561;
	
	color *= vec3(0.981, 0.862, 0.686);
	
	return color;
	
	return color;
}